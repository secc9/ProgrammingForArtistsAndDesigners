#+title: Programming for Artists and Designers Org File
#+author: Ashley Sagar

[[https://learn.gold.ac.uk/course/view.php?id=27878][PFAD VLE]]

* YOU DO GET INSPIRED BY LOOKING AT THINGS YOU LIKE!! 

* ASSESMENTS
** Mid-Term Project [10%] - Due 20/11/2023


Opens: Thursday, 2 November 2023, 4:00 PM
Due: Monday, 20 November 2023, 4:00 PM


** End of Term Final Project [80%] - Due 29/01/2024


Opens: Tuesday, 16 January 2024, 4:00 PM
Due: Monday, 29 January 2024, 4:00 PM



* Extra Resources

** Online
[[https://github.com/terkelg/awesome-creative-coding][awesome creative coding github]]

[[https://junkiyoshi.com/][Some OpenFrameworks programs]]

[[https://youtu.be/dwt2NAd1ZYY?si=9cfn4pcZ8wJT_OaR][OpenFrameworks tutorals]]


** Books



** Artists to look at
*** Project aggregators
- [[https://www.creativeapplications.net/][CreativeApplications]]
- [[https://ars.electronica.art/prix/en/][arselectronica]]
- [[https://rhizome.org/][rhizome]]
- [[https://experiments.withgoogle.com/][devart]]
- [[http://www.mediaartnet.org/][mediaart]]
- [[https://www.vice.com/en/topic/creators][vice creators]]



*** Artists

- [[http://www.flong.com/][Golan Levin]]
- [[https://julianoliver.com/output/][julian oliver]]
- [[https://www.liaworks.com/][LIA works]]
- [[https://www.memo.tv/][Memo Akten]]
- [[http://zach.li/][Zack Lieberman]]
- [[https://tegabrain.com/][Tega Brain]]
- [[https://lav.io/][Sam Levigne]]
- [[https://reas.com/][Casey Reas]]
- [[https://www.ryoichikurokawa.com/][Ryochi Kurokawa]]
- [[https://www.ryojiikeda.com/][Ryoji Ikeda]]
- [[https://www.uva.co.uk/][United Visual Artists]]
- [[https://portfolio.decontextualize.com/][Allison Parrish]]
- [[https://inconvergent.net/][Anders Hoff]]
- [[http://www.emohr.com/][Manfred Mohr]]
- [[http://www.verostko.com/][Roman Verostko]]
- [[http://www.veramolnar.com/][Vera Molnar]]



* Week_01

- Procedural art
  - instructions and diagrams as a form of art

    - research

    - [[https://massmoca.org/sol-lewitt/][Sol Le Witt]]



- [[https://openframeworks.cc/ofBook/chapters/setup_and_project_structure.html][OF Structure]]

- Homework


* Week_02

** Extra resources
- [[https://courses.cs.washington.edu/courses/cse378/97au/help/compilation.html][compilers]]

- [[https://cplusplus.com/forum/articles/10627/][header files]]

- [[https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=51d775dbf32c66fa2287c0067fad27b7fb37ac29][Golan Levin thesis]]

- [[https://github.com/colormotor/PFAD/blob/main/docs/reference.md][Class notes]]

- 

** Extra reading stuff

- [[https://openframeworks.cc/ofBook/chapters/cplusplus_basics.html][C++ Language basics]]
- [[https://openframeworks.cc/ofBook/chapters/intro_to_graphics.html][OF Graphics]]
- [[https://openframeworks.cc/ofBook/chapters/intro_to_graphics.html#movingtheworld][OF Transformations]]

  

- Drawing with of
- Debugging
- variables
- conditionals
- operators


* Homework


Prompt:

Create a program that uses the mouse input + time to incrementally construct a complex and layered drawing or pattern. You should use the "ofSetBackgroundAuto(false)" trick to do so. Try to not make a system that only places shapes centered at the mouse position (mouseX and mouseY) but rather add some behavior, for example following the mouse with the technique described in the gestural drawing lab activity, or by using the position on the window to vary shape transoformations and colors. Think about how to expand, augment, complicate, abstract and generally alter the concept of drawing/painting/doodling, while not making a system that appears completely random and leaving a sense of "agency" to the user. Try to use transparency as a tool to create complexity and gradually work towards image complexity. Think about a class of patterns/textures that emerge after using the program for a while.

You are free to use any of the code from the labs this week.
Constraints:

    You must use openFrameworks to generate your image.
    Similarly to last week use the basic 2D shape primitives we learned and any other ones you feel like from this page.
    You can use transformations (ofTranslate, ofScale, ofRotateDeg, ofRotateRad) within the work

What to submit:

    Take a screenshot of a result and submit on this page.
    Please also post your 1 image in this thread. Feel free to share a bit of information about any visual inspirations. Include a link to your post in the text box of this submission.
    Submit here a zip of the "src" directory containing the three files with code for your 1 image that you created. (main.cpp, ofApp.cpp, ofApp.h). Do not submit the IDE project files

- 

* Week_03


** Extra resources
- [[https://www.random.org/randomness/][randomness]]
- [[https://www.youtube.com/embed/Z1lQCTunGxg][On Bridget Riley]]
- [[http://op-art.co.uk/bridget-riley/][Bridget Riley words]]
- [[https://player.vimeo.com/video/104315361][Frieder Nake video]]
- [[https://www.atariarchives.org/artist/][Artist and Computer]]
- [[https://10print.org/][10Print.org]]
- [[https://en.wikipedia.org/wiki/Truchet_tiles][truchet tiles]]
- [[https://en.wikipedia.org/wiki/Wang_tile][Wang tile]]
- [[https://link.springer.com/article/10.1007/s00004-019-00454-3][Square Kufic]]


** if statments

- Save to SVG
- transformations
- rotate
- push and pop
- Functions are called in app::update

** LOOPS




* Week_04

- Arrays
- vectors
  - 2d
  - glm - OF library for vectors
- number generators
  - vectors
  - smooth randomness
    - interpolation
    - taking a series of descrete inputs and making a smooth random output


- inspiration
  - [[https://www.vam.ac.uk/exhibitions/chance-and-control-art-in-the-age-of-computers][V&A]]

- [[https://www.businessinsider.com/7-gifs-trigonometry-sine-cosine-2013-5?IR=T][Sin explained]]

- Perlin noise
  - [[https://adrianb.io/2014/08/09/perlinnoise.html][Perlin noise explained]]

  - [[https://cs.nyu.edu/~perlin/][Ken Perlin www]]
      


* Week_05






Resources
- [[https://issuu.com/jpagecorrigan/docs/type-code_yeohyun-ahn][type and code]]

- [[https://lodev.org/cgtutor/randomnoise.html][graphics tutorial]]

- [[https://openframeworks.cc/ofBook/chapters/stl_vector.html][vectorr]]s of book
n

** start on your midterm project


- [[https://learn.gold.ac.uk/mod/assign/view.php?id=1375057][vle proposal]]








Prompt:

Process, procedure, instructions. Can you make a generative "drawing" or set of generative instructions to make an artefact that is wall-mounted? 

To create the final work you must translate from a screen-based or digital format into a physical format. Creating a professional print of a 2D image you generate with code might feel like the obvious thing to do, but is there a material, a making process or some sort of form that will align better with your concept or your personal creative practice? 

At what stage are you a part of the making process? How can you take inspiration from wider art and design histories to situate your own creative processes? 

Use the topics, and code provided within the first half of the term and your own weekly experiments as a starting place. You could reflect on and refine one of those experiments or combine two to make your work. 

NOTE: This is NOT your final project, it is ONLY worth 10%. Keep it playful and experimental while starting to move toward some personal creative polish. The idea is to be using the weekly coding activities to spark some ideas, so in reality this project should start on week one of the term. 
Ideas / Examples and Resources

    Printing an image on paper or textile, either by exporting pngs from code sketches or by exporting svgs and scaling them up for print in software like Adobe Illustrator. If you don't have access to Adobe Photoshop for resizing bitmap images GIMP is a free image editing software.
        Goldsmiths print services for nice posters. Examples of artists doing this could be Zach Lieberman and Casey Reas. There are also commercial art printers (e.g. The Print Space in London), but these get expensive quickly and might be something your use for a final project.
            NOTE if your program generates a raster image and not a vector image, you will need to keep in mind that for printing it is desirable to have a very high resolution (usually 300 DPI). See this link for example. Outputting a SVG file will not pose any resolution problems as you can scale it without losing quality.
        Printing in the library, perhaps for collage / modifying the printed image with some sort of analog process. Perhaps you could make a stencil for painting for example. A nice example of a previous student's final graduation project that uses classical coding and Machine Learning as a part of her painting practice is Anna Alfut
        Unfortunately we don't have fabric printing services we have access to, but this is a reliable service.
    Laser Cutting or engraving (in materials such as wood, glass, plexiglass), by exporting svgs from code sketches. You will need to have done a Hatchlab induction before you can do this.
    Making 3D objects by extruding SVGs and then 3d printing those:
        You can do this in many 3D modeling software such as

        , which is a free and very powerful.
        To use our 3D printers you will need to have done a Hatchlab induction
    Using a pen and plotter
        We have an AxiDraw (a commercially available plotter) that can be very easy to use by using a plugin to the open source vector editing software InkSkape
        Studens on the MA/MFA computational arts have created plotters in physical computing before.
        I have done a few works using vintage plotters and the AxiDraw, you can see many examples on Twitter by searching for the #plottertwitter hashtag and many pioneers of computer art used plotters to print their work. Notable examples of the latter are Vera Molnar and Manfred Mohr

Constraints (also known as rules or restrictions):

    You must use openFrameworks to generate the core part of this work. 
    You should successfully use at least three of these coding fundamentals categories to do well on the technical front: variables, conditionals, loops, custom functions.
    You cannot display the work on a screen or a projector.
    Your final output, the creative work, must be something that you can easily mount onto a wall, either using blue tack, or thumb tacks or small nails.  
    The work should be no larger than 1 meter by 1 meter on the wall. 
    There must be NO live code running in the final form of the work.
    NO addons allowed except ofxGui.

FAQ

    More info soon

Deliverables or what to submit:

The Project

A zip of your code files, including everything needed to run the project (i.e. everything in the data folder, like images or fonts).
Project Report

You should submit a PDF of your report. You MUST follow the given template for the different sections and make sure the report is well formatted and readable.

    The written portion should be 500-700 words maximum. This word count applies to the combined total of the Description and Reflection section.

    Format should be a PDF.

    You should include these subsections in your report in this order. 

    Title of the work: Name of project

    Brief description of the work: Think of this is the bit of text you would display next to your work (max 100 words).

    Documentation: Include your documentation images in your report with small captions 

    Reflection: Imagine that this is your first iteration of this project. What went well, what went badly? What would you do next? 

    References: References to any code of others used or creative or theory inspirations. For code please include links to tutorials / code online you used or reference the books you used, you should also add comments in your code if you used someone else's code. For creative and theory references, if you are unsure about how to do academic citation please read this resource. I don't mind which academic style you prefer to use.

Documentation

    A screenshot of the raw output from your openFrameworks sketch. Please submit this as a png/jpg to this page. 

    1 high quality image of the "final work" installed on a clean white wall (or a wall that adds to your concept). Try and use a good camera for this, you can borrow one from the library or ask a friend. Please submit this as a png/jpg to this page and include it in your report PDF. 

    3 process shots / sketches of the making of the work, either screenshots of earlier iterations, of code, or images of any physical making process if you had one (these can be taken with a phone). These should just be included in your written documentation / report.


  


* Week_06

* Week_07

* Week_08

* Week_09

* Week_10
